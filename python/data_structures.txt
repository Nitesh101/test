#!/usr/bin/python
lis = [2,7,3,9,1,6,8]
print lis
lis = sorted(lis)
print lis
item=input("enter item to be searched: ")
def binary_search(lis,item):
	low = 0
	up = len(lis)
	while(low<=up):
		mid=(low+up)/2
		if (item<lis[mid]):
			up=mid-1
		elif (item>lis[mid]):
			low=mid+1
		else:
			return mid
	return "NONE"
index = binary_search(lis,item)
#print index
if index == "NONE":
	print "item not found"
else:
	print "item found at",index

#!/usr/bin/python
#ifdef PROGRAM1
#normal method
lis = [1,2,3,4,5]
print lis
lis2 = input("enter a value you vwant: ")
for val in range(len(lis)):
	if lis[val] == lis2:
		print "found value at index of: ",val
		break
else:
	print "not found"
#endif
"""
#ifdef PROGRAM2
#using functions
def linear_search(obj,item):
	for val in range(len(obj)):
		if obj[val] == item:
			return val
	return -1
obj = [1,2,3,4,5,6]
print obj
item = input("enter a value of index u want: ")
print "item found at : ",linear_search(obj,item)
#endif
"""
#!/usr/bin/python
from array import array

sLen = input("Enter queue length: ")

while not isinstance(sLen, int):
	print("Enter Integer value.")
	sLen = input("Enter stack length: ")

class Queue():
	def __init__(self):
		self.sArray = array('i')

	def insert(self):
		if len(self.sArray)+1 > sLen:
			print("queue is Full")
		else:
			value = input("Enter an Integer value: ")
			count = 1
			while count == 1:
				try:
					self.sArray.append(value)
					count = 2
				except TypeError:
					print("Enter integer values only.")
					value = input("Enter an Integer Value: ")

	def remove(self):
		self.sArray.pop(0)
	
	def display(self):
		if len(self.sArray) != 0:
			print(list(self.sArray))
		else:
			print('Empty List')

ex = Queue()

print("1: Insert\n2: Display\n3: Delete\n4: Exit")
opt = input("Enter your option: ")

while opt != 4:

	if opt == 1:
		ex.insert()

	elif opt == 2:
		ex.display()

	elif opt == 3:
		if 	len(ex.sArray) == 0:
			print("Stack is Empty, Insert Values.")
		else:
			ex.remove()

	print("1: Insert\n2: Display\n3: Delete\n4: Exit")
	opt = input("Enter your option: ")
#!/usr/bin/python
slen = input("enter stack length: ")
while not isinstance(slen,int):
	print ("enter a integer value")
	slen = input("enter stack length: ")
class Stack():
	def __init__(self):
		self.slist = list
	def insert(self):
		if len(self.slist)+1 >slen:
			print "stack is full"
		else:
			value = input("enter an integer: ")
			count = 1
		while count == 1:
			try: 
				self.slist.append(value)
				count = 2
			except TypeError:
				print("enter a integer valuei only: ")
				value = input("enter an integer value: ")
			
			
	
	def remove(self):
		self.slist.pop()
	def display(self):
		if len(self.slist)!=0:
			print(list(self.slist))
		else:
			print("Empty list")
ex = Stack()

print("1: Insert\n2: Display\n3: Delete\n4: Exit")
opt = input("Enter your option: ")

while opt != 4:

        if opt == 1:
                ex.insert()

        elif opt == 2:
                ex.display()

        elif opt == 3:
                if      len(ex.slist) == 0:
                        print("Stack is Empty, Insert Values.")
                else:
                        remove()

        print("1: Insert\n2: Display\n3: Exit\n")
        opt = input("Enter your option: ")

#!/usr/bin/python
lis = [40,20,50,60,30,10]
print "Before buble sorting: ",lis
length=len(lis)
for index in range(length-1):
	for val in range(length-1-index):
		if lis[val]>lis[val+1]:	
			temp=lis[val]
			lis[val]=lis[val+1]
			lis[val+1]=temp
print "After buble sorting: ",lis
			
#!/usr/bin/python
from array import array

sLen = input("Enter stack length: ")

while not isinstance(sLen, int):
	print("Enter Integer value.")
	sLen = input("Enter stack length: ")

class Stack():
	def __init__(self):
		self.sArray = array('i')

	def insert(self):
		if len(self.sArray)+1 > sLen:
			print("Stack is Full")
		else:
			value = input("Enter an Integer value: ")
			count = 1
			while count == 1:
				try:
					self.sArray.append(value)
					count = 2
				except TypeError:
					print("Enter integer values only.")
					value = input("Enter an Integer Value: ")

	def remove(self):
		self.sArray.pop()
	
	def display(self):
		if len(self.sArray) != 0:
			print(list(self.sArray))
		else:
			print('Empty List')

ex = Stack()

print("1: Insert\n2: Display\n3: Delete\n4: Exit")
opt = input("Enter your option: ")

while opt != 4:

	if opt == 1:
		ex.insert()

	elif opt == 2:
		ex.display()

	elif opt == 3:
		if 	len(ex.sArray) == 0:
			print("Stack is Empty, Insert Values.")
		else:
			ex.remove()

	print("1: Insert\n2: Display\n3: Delete\n4: Exit")
	opt = input("Enter your option: ")
#!/usr/bin/python
from array import array

sLen = input("Enter queue length: ")

while not isinstance(sLen, int):
	print("Enter Integer value.")
	sLen = input("Enter stack length: ")

class Queue():
	def __init__(self):
		self.sArray = array('i')

	def insert(self):
		if len(self.sArray)+1 > sLen:
			print("queue is Full")
		else:
			value = input("Enter an Integer value: ")
			count = 1
			while count == 1:
				try:
					self.sArray.append(value)
					count = 2
				except TypeError:
					print("Enter integer values only.")
					value = input("Enter an Integer Value: ")

	def remove(self):
		self.sArray.pop()
	
	def display(self):
		if len(self.sArray) != 0:
			print(list(self.sArray))
		else:
			print('Empty List')

ex = Queue()

print("1: Insert\n2: Display\n3: Delete\n4: Exit")
opt = input("Enter your option: ")

while opt != 4:

	if opt == 1:
		ex.insert()

	elif opt == 2:
		ex.display()

	elif opt == 3:
		if 	len(ex.sArray) == 0:
			print("sueue is Empty, Insert Values.")
		else:
			ex.remove()

	print("1: Insert\n2: Display\n3: Delete\n4: Exit")
	opt = input("Enter your option: ")
#!/usr/bin/python
"""
list1 = [1,2,3,4,5]
list1.insert(2,9)
print list1
list1.remove(4)
print list1
list1.append(4)
print list1
"""
"""
myStack = []
stack = 7
def stack_insert():
	global myStack
	myStack=input("enter a eles : ")
#	print myStack
#	print type(myStack)
#	print len(myStack)
	for item in myStack:
		print item
def insert_ele(index,value):
	global value
	global index
	if len(myStack)!=0:
		myStack.insert(index,value)
		print myStack
	else:
		print ("stack is full")
#myStack=input("ienter ele in list: ")
stack_insert()
index = input("enter the index: ")
insert_ele(index,value)
"""
"""
list1 = input("please enter a list: ")
elem = input("enter the element you want to append: ")
def append_ele(elem):
	list1.append(elem)
	print "after appending value: ",list1
def insert_ele(index,elem):
	if len(list1)!=0:
		list1.insert(index,elem)
		print "after inserting value: ",list1
	else:
		print "stack is full"
def pop_ele():
	list1.pop()
	print "after delete lost value: ",list1
def remove_ele(elem):
	list1.remove(elem)
	print "after remove specific value: ",list1
append_ele(elem)
index = input("enter index : ")
insert_ele(index,elem)
pop_ele()
remove_ele(elem)
"""
class Stack(list):
	def __init__(self):
		self.item = []
	def push(self,item):
		self.item.append(item)
	def pop(self):
		return self.item.pop()
	def isEmpty(self):
		return (self.item == [])
	def topOfStack(self):
		return len(self.item)
	def __str__(self):
		return str(self.item)
if __name__ == "__main__":
	stack = Stack()
	
	stack.push(4)
	stack.push(5)
	stack.push(6)
	stack.push(7)
	print stack
	stack.pop()
	print stack
	print stack.topOfStack()

